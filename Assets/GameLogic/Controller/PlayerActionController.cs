//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/GameLogic/Controller/PlayerActionController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActionController"",
    ""maps"": [
        {
            ""name"": ""PlayerBodyController"",
            ""id"": ""0215a7f0-bd9d-448d-976b-95971f16ed5e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6621a975-a6b7-4c48-85e4-67c122297aa7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e149ca5d-6ac5-486e-bc7d-1379cc9652c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicSkill"",
                    ""type"": ""Button"",
                    ""id"": ""8a709a29-c533-4b76-82f6-70bf32471b03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialSkill"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3cc52d2d-c894-48ee-a06f-339365079e73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UltimateSkill"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9954bcdd-b22a-4750-bff9-e10a047f86db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""08a85fd9-d117-4959-86e7-e965398acbfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3ab6d7bc-4656-45a6-840b-a8024992ee7f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2eb8d8fa-c818-494b-96af-356d0158523b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""698895a5-c62d-461b-9e3d-2f7d60e3f645"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bfe771f0-e2ae-4456-bf36-f2cebeb54059"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9ecea8c1-a19f-4d4d-9765-a06d3bf69915"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d54b4269-8606-4f8c-a00d-e217f1643072"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keybord"",
            ""bindingGroup"": ""Keybord"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerBodyController
        m_PlayerBodyController = asset.FindActionMap("PlayerBodyController", throwIfNotFound: true);
        m_PlayerBodyController_Move = m_PlayerBodyController.FindAction("Move", throwIfNotFound: true);
        m_PlayerBodyController_Jump = m_PlayerBodyController.FindAction("Jump", throwIfNotFound: true);
        m_PlayerBodyController_BasicSkill = m_PlayerBodyController.FindAction("BasicSkill", throwIfNotFound: true);
        m_PlayerBodyController_SpecialSkill = m_PlayerBodyController.FindAction("SpecialSkill", throwIfNotFound: true);
        m_PlayerBodyController_UltimateSkill = m_PlayerBodyController.FindAction("UltimateSkill", throwIfNotFound: true);
        m_PlayerBodyController_OpenInventory = m_PlayerBodyController.FindAction("OpenInventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerBodyController
    private readonly InputActionMap m_PlayerBodyController;
    private IPlayerBodyControllerActions m_PlayerBodyControllerActionsCallbackInterface;
    private readonly InputAction m_PlayerBodyController_Move;
    private readonly InputAction m_PlayerBodyController_Jump;
    private readonly InputAction m_PlayerBodyController_BasicSkill;
    private readonly InputAction m_PlayerBodyController_SpecialSkill;
    private readonly InputAction m_PlayerBodyController_UltimateSkill;
    private readonly InputAction m_PlayerBodyController_OpenInventory;
    public struct PlayerBodyControllerActions
    {
        private @PlayerActionController m_Wrapper;
        public PlayerBodyControllerActions(@PlayerActionController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerBodyController_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerBodyController_Jump;
        public InputAction @BasicSkill => m_Wrapper.m_PlayerBodyController_BasicSkill;
        public InputAction @SpecialSkill => m_Wrapper.m_PlayerBodyController_SpecialSkill;
        public InputAction @UltimateSkill => m_Wrapper.m_PlayerBodyController_UltimateSkill;
        public InputAction @OpenInventory => m_Wrapper.m_PlayerBodyController_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBodyController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBodyControllerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBodyControllerActions instance)
        {
            if (m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnJump;
                @BasicSkill.started -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnBasicSkill;
                @BasicSkill.performed -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnBasicSkill;
                @BasicSkill.canceled -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnBasicSkill;
                @SpecialSkill.started -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnSpecialSkill;
                @SpecialSkill.performed -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnSpecialSkill;
                @SpecialSkill.canceled -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnSpecialSkill;
                @UltimateSkill.started -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnUltimateSkill;
                @UltimateSkill.performed -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnUltimateSkill;
                @UltimateSkill.canceled -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnUltimateSkill;
                @OpenInventory.started -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.performed -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.canceled -= m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface.OnOpenInventory;
            }
            m_Wrapper.m_PlayerBodyControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @BasicSkill.started += instance.OnBasicSkill;
                @BasicSkill.performed += instance.OnBasicSkill;
                @BasicSkill.canceled += instance.OnBasicSkill;
                @SpecialSkill.started += instance.OnSpecialSkill;
                @SpecialSkill.performed += instance.OnSpecialSkill;
                @SpecialSkill.canceled += instance.OnSpecialSkill;
                @UltimateSkill.started += instance.OnUltimateSkill;
                @UltimateSkill.performed += instance.OnUltimateSkill;
                @UltimateSkill.canceled += instance.OnUltimateSkill;
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
            }
        }
    }
    public PlayerBodyControllerActions @PlayerBodyController => new PlayerBodyControllerActions(this);
    private int m_KeybordSchemeIndex = -1;
    public InputControlScheme KeybordScheme
    {
        get
        {
            if (m_KeybordSchemeIndex == -1) m_KeybordSchemeIndex = asset.FindControlSchemeIndex("Keybord");
            return asset.controlSchemes[m_KeybordSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IPlayerBodyControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnBasicSkill(InputAction.CallbackContext context);
        void OnSpecialSkill(InputAction.CallbackContext context);
        void OnUltimateSkill(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
}
